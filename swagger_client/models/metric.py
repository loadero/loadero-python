# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: v0.38.0
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Metric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'average': 'float',
        'created': 'datetime',
        'data_count': 'int',
        'id': 'int',
        'maximum': 'float',
        'metric_path': 'str',
        'minimum': 'float',
        'perc_25th': 'float',
        'perc_50th': 'float',
        'perc_75th': 'float',
        'perc_95th': 'float',
        'perc_99th': 'float',
        'rstddev': 'float',
        'stddev': 'float',
        'total': 'float',
        'value': 'str'
    }

    attribute_map = {
        'average': 'average',
        'created': 'created',
        'data_count': 'data_count',
        'id': 'id',
        'maximum': 'maximum',
        'metric_path': 'metric_path',
        'minimum': 'minimum',
        'perc_25th': 'perc_25th',
        'perc_50th': 'perc_50th',
        'perc_75th': 'perc_75th',
        'perc_95th': 'perc_95th',
        'perc_99th': 'perc_99th',
        'rstddev': 'rstddev',
        'stddev': 'stddev',
        'total': 'total',
        'value': 'value'
    }

    def __init__(self, average=None, created=None, data_count=None, id=None, maximum=None, metric_path=None, minimum=None, perc_25th=None, perc_50th=None, perc_75th=None, perc_95th=None, perc_99th=None, rstddev=None, stddev=None, total=None, value=None):  # noqa: E501
        """Metric - a model defined in Swagger"""  # noqa: E501
        self._average = None
        self._created = None
        self._data_count = None
        self._id = None
        self._maximum = None
        self._metric_path = None
        self._minimum = None
        self._perc_25th = None
        self._perc_50th = None
        self._perc_75th = None
        self._perc_95th = None
        self._perc_99th = None
        self._rstddev = None
        self._stddev = None
        self._total = None
        self._value = None
        self.discriminator = None
        if average is not None:
            self.average = average
        if created is not None:
            self.created = created
        if data_count is not None:
            self.data_count = data_count
        if id is not None:
            self.id = id
        if maximum is not None:
            self.maximum = maximum
        self.metric_path = metric_path
        if minimum is not None:
            self.minimum = minimum
        if perc_25th is not None:
            self.perc_25th = perc_25th
        if perc_50th is not None:
            self.perc_50th = perc_50th
        if perc_75th is not None:
            self.perc_75th = perc_75th
        if perc_95th is not None:
            self.perc_95th = perc_95th
        if perc_99th is not None:
            self.perc_99th = perc_99th
        if rstddev is not None:
            self.rstddev = rstddev
        if stddev is not None:
            self.stddev = stddev
        if total is not None:
            self.total = total
        if value is not None:
            self.value = value

    @property
    def average(self):
        """Gets the average of this Metric.  # noqa: E501


        :return: The average of this Metric.  # noqa: E501
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this Metric.


        :param average: The average of this Metric.  # noqa: E501
        :type: float
        """

        self._average = average

    @property
    def created(self):
        """Gets the created of this Metric.  # noqa: E501


        :return: The created of this Metric.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Metric.


        :param created: The created of this Metric.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def data_count(self):
        """Gets the data_count of this Metric.  # noqa: E501


        :return: The data_count of this Metric.  # noqa: E501
        :rtype: int
        """
        return self._data_count

    @data_count.setter
    def data_count(self, data_count):
        """Sets the data_count of this Metric.


        :param data_count: The data_count of this Metric.  # noqa: E501
        :type: int
        """

        self._data_count = data_count

    @property
    def id(self):
        """Gets the id of this Metric.  # noqa: E501


        :return: The id of this Metric.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Metric.


        :param id: The id of this Metric.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def maximum(self):
        """Gets the maximum of this Metric.  # noqa: E501


        :return: The maximum of this Metric.  # noqa: E501
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this Metric.


        :param maximum: The maximum of this Metric.  # noqa: E501
        :type: float
        """

        self._maximum = maximum

    @property
    def metric_path(self):
        """Gets the metric_path of this Metric.  # noqa: E501


        :return: The metric_path of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._metric_path

    @metric_path.setter
    def metric_path(self, metric_path):
        """Sets the metric_path of this Metric.


        :param metric_path: The metric_path of this Metric.  # noqa: E501
        :type: str
        """
        if metric_path is None:
            raise ValueError("Invalid value for `metric_path`, must not be `None`")  # noqa: E501

        self._metric_path = metric_path

    @property
    def minimum(self):
        """Gets the minimum of this Metric.  # noqa: E501


        :return: The minimum of this Metric.  # noqa: E501
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this Metric.


        :param minimum: The minimum of this Metric.  # noqa: E501
        :type: float
        """

        self._minimum = minimum

    @property
    def perc_25th(self):
        """Gets the perc_25th of this Metric.  # noqa: E501


        :return: The perc_25th of this Metric.  # noqa: E501
        :rtype: float
        """
        return self._perc_25th

    @perc_25th.setter
    def perc_25th(self, perc_25th):
        """Sets the perc_25th of this Metric.


        :param perc_25th: The perc_25th of this Metric.  # noqa: E501
        :type: float
        """

        self._perc_25th = perc_25th

    @property
    def perc_50th(self):
        """Gets the perc_50th of this Metric.  # noqa: E501


        :return: The perc_50th of this Metric.  # noqa: E501
        :rtype: float
        """
        return self._perc_50th

    @perc_50th.setter
    def perc_50th(self, perc_50th):
        """Sets the perc_50th of this Metric.


        :param perc_50th: The perc_50th of this Metric.  # noqa: E501
        :type: float
        """

        self._perc_50th = perc_50th

    @property
    def perc_75th(self):
        """Gets the perc_75th of this Metric.  # noqa: E501


        :return: The perc_75th of this Metric.  # noqa: E501
        :rtype: float
        """
        return self._perc_75th

    @perc_75th.setter
    def perc_75th(self, perc_75th):
        """Sets the perc_75th of this Metric.


        :param perc_75th: The perc_75th of this Metric.  # noqa: E501
        :type: float
        """

        self._perc_75th = perc_75th

    @property
    def perc_95th(self):
        """Gets the perc_95th of this Metric.  # noqa: E501


        :return: The perc_95th of this Metric.  # noqa: E501
        :rtype: float
        """
        return self._perc_95th

    @perc_95th.setter
    def perc_95th(self, perc_95th):
        """Sets the perc_95th of this Metric.


        :param perc_95th: The perc_95th of this Metric.  # noqa: E501
        :type: float
        """

        self._perc_95th = perc_95th

    @property
    def perc_99th(self):
        """Gets the perc_99th of this Metric.  # noqa: E501


        :return: The perc_99th of this Metric.  # noqa: E501
        :rtype: float
        """
        return self._perc_99th

    @perc_99th.setter
    def perc_99th(self, perc_99th):
        """Sets the perc_99th of this Metric.


        :param perc_99th: The perc_99th of this Metric.  # noqa: E501
        :type: float
        """

        self._perc_99th = perc_99th

    @property
    def rstddev(self):
        """Gets the rstddev of this Metric.  # noqa: E501


        :return: The rstddev of this Metric.  # noqa: E501
        :rtype: float
        """
        return self._rstddev

    @rstddev.setter
    def rstddev(self, rstddev):
        """Sets the rstddev of this Metric.


        :param rstddev: The rstddev of this Metric.  # noqa: E501
        :type: float
        """

        self._rstddev = rstddev

    @property
    def stddev(self):
        """Gets the stddev of this Metric.  # noqa: E501


        :return: The stddev of this Metric.  # noqa: E501
        :rtype: float
        """
        return self._stddev

    @stddev.setter
    def stddev(self, stddev):
        """Sets the stddev of this Metric.


        :param stddev: The stddev of this Metric.  # noqa: E501
        :type: float
        """

        self._stddev = stddev

    @property
    def total(self):
        """Gets the total of this Metric.  # noqa: E501


        :return: The total of this Metric.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Metric.


        :param total: The total of this Metric.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def value(self):
        """Gets the value of this Metric.  # noqa: E501


        :return: The value of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Metric.


        :param value: The value of this Metric.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Metric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

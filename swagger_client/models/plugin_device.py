# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PluginDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'name': 'str',
        'path': 'str',
        'settable': 'list[str]'
    }

    attribute_map = {
        'description': 'Description',
        'name': 'Name',
        'path': 'Path',
        'settable': 'Settable'
    }

    def __init__(self, description=None, name=None, path=None, settable=None):  # noqa: E501
        """PluginDevice - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._name = None
        self._path = None
        self._settable = None
        self.discriminator = None
        self.description = description
        self.name = name
        self.path = path
        self.settable = settable

    @property
    def description(self):
        """Gets the description of this PluginDevice.  # noqa: E501

        description  # noqa: E501

        :return: The description of this PluginDevice.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PluginDevice.

        description  # noqa: E501

        :param description: The description of this PluginDevice.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def name(self):
        """Gets the name of this PluginDevice.  # noqa: E501

        name  # noqa: E501

        :return: The name of this PluginDevice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PluginDevice.

        name  # noqa: E501

        :param name: The name of this PluginDevice.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this PluginDevice.  # noqa: E501

        path  # noqa: E501

        :return: The path of this PluginDevice.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PluginDevice.

        path  # noqa: E501

        :param path: The path of this PluginDevice.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def settable(self):
        """Gets the settable of this PluginDevice.  # noqa: E501

        settable  # noqa: E501

        :return: The settable of this PluginDevice.  # noqa: E501
        :rtype: list[str]
        """
        return self._settable

    @settable.setter
    def settable(self, settable):
        """Sets the settable of this PluginDevice.

        settable  # noqa: E501

        :param settable: The settable of this PluginDevice.  # noqa: E501
        :type: list[str]
        """
        if settable is None:
            raise ValueError("Invalid value for `settable`, must not be `None`")  # noqa: E501

        self._settable = settable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PluginDevice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PluginDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

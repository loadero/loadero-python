# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HistoryResponseItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'created': 'int',
        'created_by': 'str',
        'id': 'str',
        'size': 'int',
        'tags': 'list[str]'
    }

    attribute_map = {
        'comment': 'Comment',
        'created': 'Created',
        'created_by': 'CreatedBy',
        'id': 'Id',
        'size': 'Size',
        'tags': 'Tags'
    }

    def __init__(self, comment=None, created=None, created_by=None, id=None, size=None, tags=None):  # noqa: E501
        """HistoryResponseItem - a model defined in Swagger"""  # noqa: E501
        self._comment = None
        self._created = None
        self._created_by = None
        self._id = None
        self._size = None
        self._tags = None
        self.discriminator = None
        self.comment = comment
        self.created = created
        self.created_by = created_by
        self.id = id
        self.size = size
        self.tags = tags

    @property
    def comment(self):
        """Gets the comment of this HistoryResponseItem.  # noqa: E501

        comment  # noqa: E501

        :return: The comment of this HistoryResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this HistoryResponseItem.

        comment  # noqa: E501

        :param comment: The comment of this HistoryResponseItem.  # noqa: E501
        :type: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment

    @property
    def created(self):
        """Gets the created of this HistoryResponseItem.  # noqa: E501

        created  # noqa: E501

        :return: The created of this HistoryResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this HistoryResponseItem.

        created  # noqa: E501

        :param created: The created of this HistoryResponseItem.  # noqa: E501
        :type: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this HistoryResponseItem.  # noqa: E501

        created by  # noqa: E501

        :return: The created_by of this HistoryResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this HistoryResponseItem.

        created by  # noqa: E501

        :param created_by: The created_by of this HistoryResponseItem.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this HistoryResponseItem.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this HistoryResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HistoryResponseItem.

        Id  # noqa: E501

        :param id: The id of this HistoryResponseItem.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def size(self):
        """Gets the size of this HistoryResponseItem.  # noqa: E501

        size  # noqa: E501

        :return: The size of this HistoryResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this HistoryResponseItem.

        size  # noqa: E501

        :param size: The size of this HistoryResponseItem.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def tags(self):
        """Gets the tags of this HistoryResponseItem.  # noqa: E501

        tags  # noqa: E501

        :return: The tags of this HistoryResponseItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this HistoryResponseItem.

        tags  # noqa: E501

        :param tags: The tags of this HistoryResponseItem.  # noqa: E501
        :type: list[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoryResponseItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryResponseItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

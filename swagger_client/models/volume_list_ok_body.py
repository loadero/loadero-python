# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VolumeListOKBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'volumes': 'list[Volume]',
        'warnings': 'list[str]'
    }

    attribute_map = {
        'volumes': 'Volumes',
        'warnings': 'Warnings'
    }

    def __init__(self, volumes=None, warnings=None):  # noqa: E501
        """VolumeListOKBody - a model defined in Swagger"""  # noqa: E501
        self._volumes = None
        self._warnings = None
        self.discriminator = None
        self.volumes = volumes
        self.warnings = warnings

    @property
    def volumes(self):
        """Gets the volumes of this VolumeListOKBody.  # noqa: E501

        List of volumes  # noqa: E501

        :return: The volumes of this VolumeListOKBody.  # noqa: E501
        :rtype: list[Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this VolumeListOKBody.

        List of volumes  # noqa: E501

        :param volumes: The volumes of this VolumeListOKBody.  # noqa: E501
        :type: list[Volume]
        """
        if volumes is None:
            raise ValueError("Invalid value for `volumes`, must not be `None`")  # noqa: E501

        self._volumes = volumes

    @property
    def warnings(self):
        """Gets the warnings of this VolumeListOKBody.  # noqa: E501

        Warnings that occurred when fetching the list of volumes.  # noqa: E501

        :return: The warnings of this VolumeListOKBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this VolumeListOKBody.

        Warnings that occurred when fetching the list of volumes.  # noqa: E501

        :param warnings: The warnings of this VolumeListOKBody.  # noqa: E501
        :type: list[str]
        """
        if warnings is None:
            raise ValueError("Invalid value for `warnings`, must not be `None`")  # noqa: E501

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeListOKBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeListOKBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

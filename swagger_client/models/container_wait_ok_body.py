# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContainerWaitOKBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'ContainerWaitOKBodyError',
        'status_code': 'int'
    }

    attribute_map = {
        'error': 'Error',
        'status_code': 'StatusCode'
    }

    def __init__(self, error=None, status_code=None):  # noqa: E501
        """ContainerWaitOKBody - a model defined in Swagger"""  # noqa: E501
        self._error = None
        self._status_code = None
        self.discriminator = None
        self.error = error
        self.status_code = status_code

    @property
    def error(self):
        """Gets the error of this ContainerWaitOKBody.  # noqa: E501


        :return: The error of this ContainerWaitOKBody.  # noqa: E501
        :rtype: ContainerWaitOKBodyError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ContainerWaitOKBody.


        :param error: The error of this ContainerWaitOKBody.  # noqa: E501
        :type: ContainerWaitOKBodyError
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def status_code(self):
        """Gets the status_code of this ContainerWaitOKBody.  # noqa: E501

        Exit code of the container  # noqa: E501

        :return: The status_code of this ContainerWaitOKBody.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this ContainerWaitOKBody.

        Exit code of the container  # noqa: E501

        :param status_code: The status_code of this ContainerWaitOKBody.  # noqa: E501
        :type: int
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")  # noqa: E501

        self._status_code = status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContainerWaitOKBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerWaitOKBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResultLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allure_report': 'str',
        'browser': 'str',
        'created': 'datetime',
        'id': 'int',
        'result_id': 'int',
        'rru': 'str',
        'selenium': 'str',
        'webrtc': 'str'
    }

    attribute_map = {
        'allure_report': 'allure_report',
        'browser': 'browser',
        'created': 'created',
        'id': 'id',
        'result_id': 'result_id',
        'rru': 'rru',
        'selenium': 'selenium',
        'webrtc': 'webrtc'
    }

    def __init__(self, allure_report=None, browser=None, created=None, id=None, result_id=None, rru=None, selenium=None, webrtc=None):  # noqa: E501
        """ResultLog - a model defined in Swagger"""  # noqa: E501
        self._allure_report = None
        self._browser = None
        self._created = None
        self._id = None
        self._result_id = None
        self._rru = None
        self._selenium = None
        self._webrtc = None
        self.discriminator = None
        if allure_report is not None:
            self.allure_report = allure_report
        if browser is not None:
            self.browser = browser
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if result_id is not None:
            self.result_id = result_id
        if rru is not None:
            self.rru = rru
        if selenium is not None:
            self.selenium = selenium
        if webrtc is not None:
            self.webrtc = webrtc

    @property
    def allure_report(self):
        """Gets the allure_report of this ResultLog.  # noqa: E501


        :return: The allure_report of this ResultLog.  # noqa: E501
        :rtype: str
        """
        return self._allure_report

    @allure_report.setter
    def allure_report(self, allure_report):
        """Sets the allure_report of this ResultLog.


        :param allure_report: The allure_report of this ResultLog.  # noqa: E501
        :type: str
        """

        self._allure_report = allure_report

    @property
    def browser(self):
        """Gets the browser of this ResultLog.  # noqa: E501


        :return: The browser of this ResultLog.  # noqa: E501
        :rtype: str
        """
        return self._browser

    @browser.setter
    def browser(self, browser):
        """Sets the browser of this ResultLog.


        :param browser: The browser of this ResultLog.  # noqa: E501
        :type: str
        """

        self._browser = browser

    @property
    def created(self):
        """Gets the created of this ResultLog.  # noqa: E501


        :return: The created of this ResultLog.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ResultLog.


        :param created: The created of this ResultLog.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this ResultLog.  # noqa: E501


        :return: The id of this ResultLog.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResultLog.


        :param id: The id of this ResultLog.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def result_id(self):
        """Gets the result_id of this ResultLog.  # noqa: E501


        :return: The result_id of this ResultLog.  # noqa: E501
        :rtype: int
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this ResultLog.


        :param result_id: The result_id of this ResultLog.  # noqa: E501
        :type: int
        """

        self._result_id = result_id

    @property
    def rru(self):
        """Gets the rru of this ResultLog.  # noqa: E501


        :return: The rru of this ResultLog.  # noqa: E501
        :rtype: str
        """
        return self._rru

    @rru.setter
    def rru(self, rru):
        """Sets the rru of this ResultLog.


        :param rru: The rru of this ResultLog.  # noqa: E501
        :type: str
        """

        self._rru = rru

    @property
    def selenium(self):
        """Gets the selenium of this ResultLog.  # noqa: E501


        :return: The selenium of this ResultLog.  # noqa: E501
        :rtype: str
        """
        return self._selenium

    @selenium.setter
    def selenium(self, selenium):
        """Sets the selenium of this ResultLog.


        :param selenium: The selenium of this ResultLog.  # noqa: E501
        :type: str
        """

        self._selenium = selenium

    @property
    def webrtc(self):
        """Gets the webrtc of this ResultLog.  # noqa: E501


        :return: The webrtc of this ResultLog.  # noqa: E501
        :rtype: str
        """
        return self._webrtc

    @webrtc.setter
    def webrtc(self, webrtc):
        """Sets the webrtc of this ResultLog.


        :param webrtc: The webrtc of this ResultLog.  # noqa: E501
        :type: str
        """

        self._webrtc = webrtc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

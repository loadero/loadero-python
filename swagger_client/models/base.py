# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: v0.38.0
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Base(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compute_unit': 'str',
        'group_name': 'str',
        'group_num': 'int',
        'participant_name': 'str',
        'participant_num': 'int',
        'profile_id': 'int'
    }

    attribute_map = {
        'compute_unit': 'compute_unit',
        'group_name': 'group_name',
        'group_num': 'group_num',
        'participant_name': 'participant_name',
        'participant_num': 'participant_num',
        'profile_id': 'profile_id'
    }

    def __init__(self, compute_unit=None, group_name=None, group_num=None, participant_name=None, participant_num=None, profile_id=None):  # noqa: E501
        """Base - a model defined in Swagger"""  # noqa: E501
        self._compute_unit = None
        self._group_name = None
        self._group_num = None
        self._participant_name = None
        self._participant_num = None
        self._profile_id = None
        self.discriminator = None
        if compute_unit is not None:
            self.compute_unit = compute_unit
        if group_name is not None:
            self.group_name = group_name
        if group_num is not None:
            self.group_num = group_num
        if participant_name is not None:
            self.participant_name = participant_name
        if participant_num is not None:
            self.participant_num = participant_num
        if profile_id is not None:
            self.profile_id = profile_id

    @property
    def compute_unit(self):
        """Gets the compute_unit of this Base.  # noqa: E501


        :return: The compute_unit of this Base.  # noqa: E501
        :rtype: str
        """
        return self._compute_unit

    @compute_unit.setter
    def compute_unit(self, compute_unit):
        """Sets the compute_unit of this Base.


        :param compute_unit: The compute_unit of this Base.  # noqa: E501
        :type: str
        """

        self._compute_unit = compute_unit

    @property
    def group_name(self):
        """Gets the group_name of this Base.  # noqa: E501


        :return: The group_name of this Base.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this Base.


        :param group_name: The group_name of this Base.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def group_num(self):
        """Gets the group_num of this Base.  # noqa: E501


        :return: The group_num of this Base.  # noqa: E501
        :rtype: int
        """
        return self._group_num

    @group_num.setter
    def group_num(self, group_num):
        """Sets the group_num of this Base.


        :param group_num: The group_num of this Base.  # noqa: E501
        :type: int
        """

        self._group_num = group_num

    @property
    def participant_name(self):
        """Gets the participant_name of this Base.  # noqa: E501


        :return: The participant_name of this Base.  # noqa: E501
        :rtype: str
        """
        return self._participant_name

    @participant_name.setter
    def participant_name(self, participant_name):
        """Sets the participant_name of this Base.


        :param participant_name: The participant_name of this Base.  # noqa: E501
        :type: str
        """

        self._participant_name = participant_name

    @property
    def participant_num(self):
        """Gets the participant_num of this Base.  # noqa: E501


        :return: The participant_num of this Base.  # noqa: E501
        :rtype: int
        """
        return self._participant_num

    @participant_num.setter
    def participant_num(self, participant_num):
        """Sets the participant_num of this Base.


        :param participant_num: The participant_num of this Base.  # noqa: E501
        :type: int
        """

        self._participant_num = participant_num

    @property
    def profile_id(self):
        """Gets the profile_id of this Base.  # noqa: E501


        :return: The profile_id of this Base.  # noqa: E501
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this Base.


        :param profile_id: The profile_id of this Base.  # noqa: E501
        :type: int
        """

        self._profile_id = profile_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Base, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Base):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

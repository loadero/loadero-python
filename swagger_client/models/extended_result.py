# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExtendedResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifacts': 'ArtifactsInfo',
        'asserts': 'list[ResultAssert]',
        'created': 'datetime',
        'end': 'datetime',
        'id': 'int',
        'log_paths': 'ResultLog',
        'metrics': 'Metrics',
        'mos': 'MeanOpinionScores',
        'participant_details': 'RunParticipant',
        'profile_params': 'Params',
        'run_participant_id': 'int',
        'selenium_result': 'str',
        'start': 'datetime',
        'status': 'str',
        'updated': 'datetime'
    }

    attribute_map = {
        'artifacts': 'artifacts',
        'asserts': 'asserts',
        'created': 'created',
        'end': 'end',
        'id': 'id',
        'log_paths': 'log_paths',
        'metrics': 'metrics',
        'mos': 'mos',
        'participant_details': 'participant_details',
        'profile_params': 'profile_params',
        'run_participant_id': 'run_participant_id',
        'selenium_result': 'selenium_result',
        'start': 'start',
        'status': 'status',
        'updated': 'updated'
    }

    def __init__(self, artifacts=None, asserts=None, created=None, end=None, id=None, log_paths=None, metrics=None, mos=None, participant_details=None, profile_params=None, run_participant_id=None, selenium_result=None, start=None, status=None, updated=None):  # noqa: E501
        """ExtendedResult - a model defined in Swagger"""  # noqa: E501
        self._artifacts = None
        self._asserts = None
        self._created = None
        self._end = None
        self._id = None
        self._log_paths = None
        self._metrics = None
        self._mos = None
        self._participant_details = None
        self._profile_params = None
        self._run_participant_id = None
        self._selenium_result = None
        self._start = None
        self._status = None
        self._updated = None
        self.discriminator = None
        if artifacts is not None:
            self.artifacts = artifacts
        if asserts is not None:
            self.asserts = asserts
        if created is not None:
            self.created = created
        if end is not None:
            self.end = end
        if id is not None:
            self.id = id
        if log_paths is not None:
            self.log_paths = log_paths
        if metrics is not None:
            self.metrics = metrics
        if mos is not None:
            self.mos = mos
        if participant_details is not None:
            self.participant_details = participant_details
        if profile_params is not None:
            self.profile_params = profile_params
        if run_participant_id is not None:
            self.run_participant_id = run_participant_id
        if selenium_result is not None:
            self.selenium_result = selenium_result
        if start is not None:
            self.start = start
        if status is not None:
            self.status = status
        if updated is not None:
            self.updated = updated

    @property
    def artifacts(self):
        """Gets the artifacts of this ExtendedResult.  # noqa: E501


        :return: The artifacts of this ExtendedResult.  # noqa: E501
        :rtype: ArtifactsInfo
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this ExtendedResult.


        :param artifacts: The artifacts of this ExtendedResult.  # noqa: E501
        :type: ArtifactsInfo
        """

        self._artifacts = artifacts

    @property
    def asserts(self):
        """Gets the asserts of this ExtendedResult.  # noqa: E501


        :return: The asserts of this ExtendedResult.  # noqa: E501
        :rtype: list[ResultAssert]
        """
        return self._asserts

    @asserts.setter
    def asserts(self, asserts):
        """Sets the asserts of this ExtendedResult.


        :param asserts: The asserts of this ExtendedResult.  # noqa: E501
        :type: list[ResultAssert]
        """

        self._asserts = asserts

    @property
    def created(self):
        """Gets the created of this ExtendedResult.  # noqa: E501


        :return: The created of this ExtendedResult.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ExtendedResult.


        :param created: The created of this ExtendedResult.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def end(self):
        """Gets the end of this ExtendedResult.  # noqa: E501


        :return: The end of this ExtendedResult.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this ExtendedResult.


        :param end: The end of this ExtendedResult.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def id(self):
        """Gets the id of this ExtendedResult.  # noqa: E501


        :return: The id of this ExtendedResult.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExtendedResult.


        :param id: The id of this ExtendedResult.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def log_paths(self):
        """Gets the log_paths of this ExtendedResult.  # noqa: E501


        :return: The log_paths of this ExtendedResult.  # noqa: E501
        :rtype: ResultLog
        """
        return self._log_paths

    @log_paths.setter
    def log_paths(self, log_paths):
        """Sets the log_paths of this ExtendedResult.


        :param log_paths: The log_paths of this ExtendedResult.  # noqa: E501
        :type: ResultLog
        """

        self._log_paths = log_paths

    @property
    def metrics(self):
        """Gets the metrics of this ExtendedResult.  # noqa: E501


        :return: The metrics of this ExtendedResult.  # noqa: E501
        :rtype: Metrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ExtendedResult.


        :param metrics: The metrics of this ExtendedResult.  # noqa: E501
        :type: Metrics
        """

        self._metrics = metrics

    @property
    def mos(self):
        """Gets the mos of this ExtendedResult.  # noqa: E501


        :return: The mos of this ExtendedResult.  # noqa: E501
        :rtype: MeanOpinionScores
        """
        return self._mos

    @mos.setter
    def mos(self, mos):
        """Sets the mos of this ExtendedResult.


        :param mos: The mos of this ExtendedResult.  # noqa: E501
        :type: MeanOpinionScores
        """

        self._mos = mos

    @property
    def participant_details(self):
        """Gets the participant_details of this ExtendedResult.  # noqa: E501


        :return: The participant_details of this ExtendedResult.  # noqa: E501
        :rtype: RunParticipant
        """
        return self._participant_details

    @participant_details.setter
    def participant_details(self, participant_details):
        """Sets the participant_details of this ExtendedResult.


        :param participant_details: The participant_details of this ExtendedResult.  # noqa: E501
        :type: RunParticipant
        """

        self._participant_details = participant_details

    @property
    def profile_params(self):
        """Gets the profile_params of this ExtendedResult.  # noqa: E501


        :return: The profile_params of this ExtendedResult.  # noqa: E501
        :rtype: Params
        """
        return self._profile_params

    @profile_params.setter
    def profile_params(self, profile_params):
        """Sets the profile_params of this ExtendedResult.


        :param profile_params: The profile_params of this ExtendedResult.  # noqa: E501
        :type: Params
        """

        self._profile_params = profile_params

    @property
    def run_participant_id(self):
        """Gets the run_participant_id of this ExtendedResult.  # noqa: E501


        :return: The run_participant_id of this ExtendedResult.  # noqa: E501
        :rtype: int
        """
        return self._run_participant_id

    @run_participant_id.setter
    def run_participant_id(self, run_participant_id):
        """Sets the run_participant_id of this ExtendedResult.


        :param run_participant_id: The run_participant_id of this ExtendedResult.  # noqa: E501
        :type: int
        """

        self._run_participant_id = run_participant_id

    @property
    def selenium_result(self):
        """Gets the selenium_result of this ExtendedResult.  # noqa: E501


        :return: The selenium_result of this ExtendedResult.  # noqa: E501
        :rtype: str
        """
        return self._selenium_result

    @selenium_result.setter
    def selenium_result(self, selenium_result):
        """Sets the selenium_result of this ExtendedResult.


        :param selenium_result: The selenium_result of this ExtendedResult.  # noqa: E501
        :type: str
        """

        self._selenium_result = selenium_result

    @property
    def start(self):
        """Gets the start of this ExtendedResult.  # noqa: E501


        :return: The start of this ExtendedResult.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ExtendedResult.


        :param start: The start of this ExtendedResult.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def status(self):
        """Gets the status of this ExtendedResult.  # noqa: E501


        :return: The status of this ExtendedResult.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExtendedResult.


        :param status: The status of this ExtendedResult.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this ExtendedResult.  # noqa: E501


        :return: The updated of this ExtendedResult.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ExtendedResult.


        :param updated: The updated of this ExtendedResult.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtendedResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtendedResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

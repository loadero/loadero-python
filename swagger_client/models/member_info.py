# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MemberInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'Account',
        'account_id': 'int',
        'created': 'datetime',
        'id': 'int',
        'project_id': 'int',
        'role': 'str',
        'updated': 'datetime'
    }

    attribute_map = {
        'account': 'account',
        'account_id': 'account_id',
        'created': 'created',
        'id': 'id',
        'project_id': 'project_id',
        'role': 'role',
        'updated': 'updated'
    }

    def __init__(self, account=None, account_id=None, created=None, id=None, project_id=None, role=None, updated=None):  # noqa: E501
        """MemberInfo - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._account_id = None
        self._created = None
        self._id = None
        self._project_id = None
        self._role = None
        self._updated = None
        self.discriminator = None
        if account is not None:
            self.account = account
        if account_id is not None:
            self.account_id = account_id
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        self.role = role
        if updated is not None:
            self.updated = updated

    @property
    def account(self):
        """Gets the account of this MemberInfo.  # noqa: E501


        :return: The account of this MemberInfo.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this MemberInfo.


        :param account: The account of this MemberInfo.  # noqa: E501
        :type: Account
        """

        self._account = account

    @property
    def account_id(self):
        """Gets the account_id of this MemberInfo.  # noqa: E501


        :return: The account_id of this MemberInfo.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this MemberInfo.


        :param account_id: The account_id of this MemberInfo.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def created(self):
        """Gets the created of this MemberInfo.  # noqa: E501


        :return: The created of this MemberInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MemberInfo.


        :param created: The created of this MemberInfo.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this MemberInfo.  # noqa: E501


        :return: The id of this MemberInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MemberInfo.


        :param id: The id of this MemberInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this MemberInfo.  # noqa: E501


        :return: The project_id of this MemberInfo.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this MemberInfo.


        :param project_id: The project_id of this MemberInfo.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def role(self):
        """Gets the role of this MemberInfo.  # noqa: E501


        :return: The role of this MemberInfo.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this MemberInfo.


        :param role: The role of this MemberInfo.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def updated(self):
        """Gets the updated of this MemberInfo.  # noqa: E501


        :return: The updated of this MemberInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this MemberInfo.


        :param updated: The updated of this MemberInfo.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

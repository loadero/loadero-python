# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Subscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activation_date': 'datetime',
        'billing_email': 'str',
        'created': 'datetime',
        'id': 'int',
        'payment_plan': 'str',
        'payment_status': 'str',
        'settings': 'Settings',
        'updated': 'datetime'
    }

    attribute_map = {
        'activation_date': 'activation_date',
        'billing_email': 'billing_email',
        'created': 'created',
        'id': 'id',
        'payment_plan': 'payment_plan',
        'payment_status': 'payment_status',
        'settings': 'settings',
        'updated': 'updated'
    }

    def __init__(self, activation_date=None, billing_email=None, created=None, id=None, payment_plan=None, payment_status=None, settings=None, updated=None):  # noqa: E501
        """Subscription - a model defined in Swagger"""  # noqa: E501
        self._activation_date = None
        self._billing_email = None
        self._created = None
        self._id = None
        self._payment_plan = None
        self._payment_status = None
        self._settings = None
        self._updated = None
        self.discriminator = None
        if activation_date is not None:
            self.activation_date = activation_date
        self.billing_email = billing_email
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        self.payment_plan = payment_plan
        if payment_status is not None:
            self.payment_status = payment_status
        if settings is not None:
            self.settings = settings
        if updated is not None:
            self.updated = updated

    @property
    def activation_date(self):
        """Gets the activation_date of this Subscription.  # noqa: E501


        :return: The activation_date of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._activation_date

    @activation_date.setter
    def activation_date(self, activation_date):
        """Sets the activation_date of this Subscription.


        :param activation_date: The activation_date of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._activation_date = activation_date

    @property
    def billing_email(self):
        """Gets the billing_email of this Subscription.  # noqa: E501


        :return: The billing_email of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._billing_email

    @billing_email.setter
    def billing_email(self, billing_email):
        """Sets the billing_email of this Subscription.


        :param billing_email: The billing_email of this Subscription.  # noqa: E501
        :type: str
        """
        if billing_email is None:
            raise ValueError("Invalid value for `billing_email`, must not be `None`")  # noqa: E501

        self._billing_email = billing_email

    @property
    def created(self):
        """Gets the created of this Subscription.  # noqa: E501


        :return: The created of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Subscription.


        :param created: The created of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this Subscription.  # noqa: E501


        :return: The id of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def payment_plan(self):
        """Gets the payment_plan of this Subscription.  # noqa: E501


        :return: The payment_plan of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._payment_plan

    @payment_plan.setter
    def payment_plan(self, payment_plan):
        """Sets the payment_plan of this Subscription.


        :param payment_plan: The payment_plan of this Subscription.  # noqa: E501
        :type: str
        """
        if payment_plan is None:
            raise ValueError("Invalid value for `payment_plan`, must not be `None`")  # noqa: E501

        self._payment_plan = payment_plan

    @property
    def payment_status(self):
        """Gets the payment_status of this Subscription.  # noqa: E501


        :return: The payment_status of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this Subscription.


        :param payment_status: The payment_status of this Subscription.  # noqa: E501
        :type: str
        """

        self._payment_status = payment_status

    @property
    def settings(self):
        """Gets the settings of this Subscription.  # noqa: E501


        :return: The settings of this Subscription.  # noqa: E501
        :rtype: Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Subscription.


        :param settings: The settings of this Subscription.  # noqa: E501
        :type: Settings
        """

        self._settings = settings

    @property
    def updated(self):
        """Gets the updated of this Subscription.  # noqa: E501


        :return: The updated of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Subscription.


        :param updated: The updated of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Subscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

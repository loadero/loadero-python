# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: v0.38.0
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArtifactsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio': 'ArtifactInfo',
        'downloads': 'ArtifactInfo',
        'screenshots': 'ArtifactInfo',
        'video': 'ArtifactInfo'
    }

    attribute_map = {
        'audio': 'audio',
        'downloads': 'downloads',
        'screenshots': 'screenshots',
        'video': 'video'
    }

    def __init__(self, audio=None, downloads=None, screenshots=None, video=None):  # noqa: E501
        """ArtifactsInfo - a model defined in Swagger"""  # noqa: E501
        self._audio = None
        self._downloads = None
        self._screenshots = None
        self._video = None
        self.discriminator = None
        if audio is not None:
            self.audio = audio
        if downloads is not None:
            self.downloads = downloads
        if screenshots is not None:
            self.screenshots = screenshots
        if video is not None:
            self.video = video

    @property
    def audio(self):
        """Gets the audio of this ArtifactsInfo.  # noqa: E501


        :return: The audio of this ArtifactsInfo.  # noqa: E501
        :rtype: ArtifactInfo
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this ArtifactsInfo.


        :param audio: The audio of this ArtifactsInfo.  # noqa: E501
        :type: ArtifactInfo
        """

        self._audio = audio

    @property
    def downloads(self):
        """Gets the downloads of this ArtifactsInfo.  # noqa: E501


        :return: The downloads of this ArtifactsInfo.  # noqa: E501
        :rtype: ArtifactInfo
        """
        return self._downloads

    @downloads.setter
    def downloads(self, downloads):
        """Sets the downloads of this ArtifactsInfo.


        :param downloads: The downloads of this ArtifactsInfo.  # noqa: E501
        :type: ArtifactInfo
        """

        self._downloads = downloads

    @property
    def screenshots(self):
        """Gets the screenshots of this ArtifactsInfo.  # noqa: E501


        :return: The screenshots of this ArtifactsInfo.  # noqa: E501
        :rtype: ArtifactInfo
        """
        return self._screenshots

    @screenshots.setter
    def screenshots(self, screenshots):
        """Sets the screenshots of this ArtifactsInfo.


        :param screenshots: The screenshots of this ArtifactsInfo.  # noqa: E501
        :type: ArtifactInfo
        """

        self._screenshots = screenshots

    @property
    def video(self):
        """Gets the video of this ArtifactsInfo.  # noqa: E501


        :return: The video of this ArtifactsInfo.  # noqa: E501
        :rtype: ArtifactInfo
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this ArtifactsInfo.


        :param video: The video of this ArtifactsInfo.  # noqa: E501
        :type: ArtifactInfo
        """

        self._video = video

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArtifactsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArtifactsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

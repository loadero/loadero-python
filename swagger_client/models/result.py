# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Result(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'end': 'datetime',
        'id': 'int',
        'run_participant_id': 'int',
        'selenium_result': 'str',
        'start': 'datetime',
        'status': 'str',
        'updated': 'datetime'
    }

    attribute_map = {
        'created': 'created',
        'end': 'end',
        'id': 'id',
        'run_participant_id': 'run_participant_id',
        'selenium_result': 'selenium_result',
        'start': 'start',
        'status': 'status',
        'updated': 'updated'
    }

    def __init__(self, created=None, end=None, id=None, run_participant_id=None, selenium_result=None, start=None, status=None, updated=None):  # noqa: E501
        """Result - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._end = None
        self._id = None
        self._run_participant_id = None
        self._selenium_result = None
        self._start = None
        self._status = None
        self._updated = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if end is not None:
            self.end = end
        if id is not None:
            self.id = id
        if run_participant_id is not None:
            self.run_participant_id = run_participant_id
        if selenium_result is not None:
            self.selenium_result = selenium_result
        if start is not None:
            self.start = start
        if status is not None:
            self.status = status
        if updated is not None:
            self.updated = updated

    @property
    def created(self):
        """Gets the created of this Result.  # noqa: E501


        :return: The created of this Result.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Result.


        :param created: The created of this Result.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def end(self):
        """Gets the end of this Result.  # noqa: E501


        :return: The end of this Result.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Result.


        :param end: The end of this Result.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def id(self):
        """Gets the id of this Result.  # noqa: E501


        :return: The id of this Result.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Result.


        :param id: The id of this Result.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def run_participant_id(self):
        """Gets the run_participant_id of this Result.  # noqa: E501


        :return: The run_participant_id of this Result.  # noqa: E501
        :rtype: int
        """
        return self._run_participant_id

    @run_participant_id.setter
    def run_participant_id(self, run_participant_id):
        """Sets the run_participant_id of this Result.


        :param run_participant_id: The run_participant_id of this Result.  # noqa: E501
        :type: int
        """

        self._run_participant_id = run_participant_id

    @property
    def selenium_result(self):
        """Gets the selenium_result of this Result.  # noqa: E501


        :return: The selenium_result of this Result.  # noqa: E501
        :rtype: str
        """
        return self._selenium_result

    @selenium_result.setter
    def selenium_result(self, selenium_result):
        """Sets the selenium_result of this Result.


        :param selenium_result: The selenium_result of this Result.  # noqa: E501
        :type: str
        """

        self._selenium_result = selenium_result

    @property
    def start(self):
        """Gets the start of this Result.  # noqa: E501


        :return: The start of this Result.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Result.


        :param start: The start of this Result.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def status(self):
        """Gets the status of this Result.  # noqa: E501


        :return: The status of this Result.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Result.


        :param status: The status of this Result.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this Result.  # noqa: E501


        :return: The updated of this Result.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Result.


        :param updated: The updated of this Result.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Result, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Result):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: v0.38.0
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssertOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expected': 'str',
        'fail': 'int',
        'operator': 'str',
        '_pass': 'int',
        'path': 'str',
        'preconditions': 'list[RunAssertPrecondition]',
        'run_assert_id': 'int',
        'skip': 'int',
        'status': 'str'
    }

    attribute_map = {
        'expected': 'expected',
        'fail': 'fail',
        'operator': 'operator',
        '_pass': 'pass',
        'path': 'path',
        'preconditions': 'preconditions',
        'run_assert_id': 'run_assert_id',
        'skip': 'skip',
        'status': 'status'
    }

    def __init__(self, expected=None, fail=None, operator=None, _pass=None, path=None, preconditions=None, run_assert_id=None, skip=None, status=None):  # noqa: E501
        """AssertOverview - a model defined in Swagger"""  # noqa: E501
        self._expected = None
        self._fail = None
        self._operator = None
        self.__pass = None
        self._path = None
        self._preconditions = None
        self._run_assert_id = None
        self._skip = None
        self._status = None
        self.discriminator = None
        self.expected = expected
        if fail is not None:
            self.fail = fail
        self.operator = operator
        if _pass is not None:
            self._pass = _pass
        self.path = path
        if preconditions is not None:
            self.preconditions = preconditions
        if run_assert_id is not None:
            self.run_assert_id = run_assert_id
        if skip is not None:
            self.skip = skip
        if status is not None:
            self.status = status

    @property
    def expected(self):
        """Gets the expected of this AssertOverview.  # noqa: E501


        :return: The expected of this AssertOverview.  # noqa: E501
        :rtype: str
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """Sets the expected of this AssertOverview.


        :param expected: The expected of this AssertOverview.  # noqa: E501
        :type: str
        """
        if expected is None:
            raise ValueError("Invalid value for `expected`, must not be `None`")  # noqa: E501

        self._expected = expected

    @property
    def fail(self):
        """Gets the fail of this AssertOverview.  # noqa: E501


        :return: The fail of this AssertOverview.  # noqa: E501
        :rtype: int
        """
        return self._fail

    @fail.setter
    def fail(self, fail):
        """Sets the fail of this AssertOverview.


        :param fail: The fail of this AssertOverview.  # noqa: E501
        :type: int
        """

        self._fail = fail

    @property
    def operator(self):
        """Gets the operator of this AssertOverview.  # noqa: E501


        :return: The operator of this AssertOverview.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this AssertOverview.


        :param operator: The operator of this AssertOverview.  # noqa: E501
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def _pass(self):
        """Gets the _pass of this AssertOverview.  # noqa: E501


        :return: The _pass of this AssertOverview.  # noqa: E501
        :rtype: int
        """
        return self.__pass

    @_pass.setter
    def _pass(self, _pass):
        """Sets the _pass of this AssertOverview.


        :param _pass: The _pass of this AssertOverview.  # noqa: E501
        :type: int
        """

        self.__pass = _pass

    @property
    def path(self):
        """Gets the path of this AssertOverview.  # noqa: E501


        :return: The path of this AssertOverview.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AssertOverview.


        :param path: The path of this AssertOverview.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def preconditions(self):
        """Gets the preconditions of this AssertOverview.  # noqa: E501


        :return: The preconditions of this AssertOverview.  # noqa: E501
        :rtype: list[RunAssertPrecondition]
        """
        return self._preconditions

    @preconditions.setter
    def preconditions(self, preconditions):
        """Sets the preconditions of this AssertOverview.


        :param preconditions: The preconditions of this AssertOverview.  # noqa: E501
        :type: list[RunAssertPrecondition]
        """

        self._preconditions = preconditions

    @property
    def run_assert_id(self):
        """Gets the run_assert_id of this AssertOverview.  # noqa: E501


        :return: The run_assert_id of this AssertOverview.  # noqa: E501
        :rtype: int
        """
        return self._run_assert_id

    @run_assert_id.setter
    def run_assert_id(self, run_assert_id):
        """Sets the run_assert_id of this AssertOverview.


        :param run_assert_id: The run_assert_id of this AssertOverview.  # noqa: E501
        :type: int
        """

        self._run_assert_id = run_assert_id

    @property
    def skip(self):
        """Gets the skip of this AssertOverview.  # noqa: E501


        :return: The skip of this AssertOverview.  # noqa: E501
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this AssertOverview.


        :param skip: The skip of this AssertOverview.  # noqa: E501
        :type: int
        """

        self._skip = skip

    @property
    def status(self):
        """Gets the status of this AssertOverview.  # noqa: E501


        :return: The status of this AssertOverview.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssertOverview.


        :param status: The status of this AssertOverview.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssertOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssertOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

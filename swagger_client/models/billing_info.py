# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: v0.38.0
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BillingInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing_address': 'AddressInfo',
        'buyer_kind': 'str',
        'default_payment_method': 'str',
        'invoices': 'list[BillingInvoice]',
        'name': 'str',
        'next_invoice': 'BillingInvoice',
        'payment_methods': 'list[PaymentMethod]',
        'subscription_id': 'int',
        'vat_info': 'VatInfo'
    }

    attribute_map = {
        'billing_address': 'billing_address',
        'buyer_kind': 'buyer_kind',
        'default_payment_method': 'default_payment_method',
        'invoices': 'invoices',
        'name': 'name',
        'next_invoice': 'next_invoice',
        'payment_methods': 'payment_methods',
        'subscription_id': 'subscription_id',
        'vat_info': 'vat_info'
    }

    def __init__(self, billing_address=None, buyer_kind=None, default_payment_method=None, invoices=None, name=None, next_invoice=None, payment_methods=None, subscription_id=None, vat_info=None):  # noqa: E501
        """BillingInfo - a model defined in Swagger"""  # noqa: E501
        self._billing_address = None
        self._buyer_kind = None
        self._default_payment_method = None
        self._invoices = None
        self._name = None
        self._next_invoice = None
        self._payment_methods = None
        self._subscription_id = None
        self._vat_info = None
        self.discriminator = None
        if billing_address is not None:
            self.billing_address = billing_address
        if buyer_kind is not None:
            self.buyer_kind = buyer_kind
        if default_payment_method is not None:
            self.default_payment_method = default_payment_method
        if invoices is not None:
            self.invoices = invoices
        if name is not None:
            self.name = name
        if next_invoice is not None:
            self.next_invoice = next_invoice
        if payment_methods is not None:
            self.payment_methods = payment_methods
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if vat_info is not None:
            self.vat_info = vat_info

    @property
    def billing_address(self):
        """Gets the billing_address of this BillingInfo.  # noqa: E501


        :return: The billing_address of this BillingInfo.  # noqa: E501
        :rtype: AddressInfo
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this BillingInfo.


        :param billing_address: The billing_address of this BillingInfo.  # noqa: E501
        :type: AddressInfo
        """

        self._billing_address = billing_address

    @property
    def buyer_kind(self):
        """Gets the buyer_kind of this BillingInfo.  # noqa: E501


        :return: The buyer_kind of this BillingInfo.  # noqa: E501
        :rtype: str
        """
        return self._buyer_kind

    @buyer_kind.setter
    def buyer_kind(self, buyer_kind):
        """Sets the buyer_kind of this BillingInfo.


        :param buyer_kind: The buyer_kind of this BillingInfo.  # noqa: E501
        :type: str
        """

        self._buyer_kind = buyer_kind

    @property
    def default_payment_method(self):
        """Gets the default_payment_method of this BillingInfo.  # noqa: E501

        normalize indentation  # noqa: E501

        :return: The default_payment_method of this BillingInfo.  # noqa: E501
        :rtype: str
        """
        return self._default_payment_method

    @default_payment_method.setter
    def default_payment_method(self, default_payment_method):
        """Sets the default_payment_method of this BillingInfo.

        normalize indentation  # noqa: E501

        :param default_payment_method: The default_payment_method of this BillingInfo.  # noqa: E501
        :type: str
        """

        self._default_payment_method = default_payment_method

    @property
    def invoices(self):
        """Gets the invoices of this BillingInfo.  # noqa: E501

        normalize indentation  # noqa: E501

        :return: The invoices of this BillingInfo.  # noqa: E501
        :rtype: list[BillingInvoice]
        """
        return self._invoices

    @invoices.setter
    def invoices(self, invoices):
        """Sets the invoices of this BillingInfo.

        normalize indentation  # noqa: E501

        :param invoices: The invoices of this BillingInfo.  # noqa: E501
        :type: list[BillingInvoice]
        """

        self._invoices = invoices

    @property
    def name(self):
        """Gets the name of this BillingInfo.  # noqa: E501


        :return: The name of this BillingInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BillingInfo.


        :param name: The name of this BillingInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def next_invoice(self):
        """Gets the next_invoice of this BillingInfo.  # noqa: E501


        :return: The next_invoice of this BillingInfo.  # noqa: E501
        :rtype: BillingInvoice
        """
        return self._next_invoice

    @next_invoice.setter
    def next_invoice(self, next_invoice):
        """Sets the next_invoice of this BillingInfo.


        :param next_invoice: The next_invoice of this BillingInfo.  # noqa: E501
        :type: BillingInvoice
        """

        self._next_invoice = next_invoice

    @property
    def payment_methods(self):
        """Gets the payment_methods of this BillingInfo.  # noqa: E501


        :return: The payment_methods of this BillingInfo.  # noqa: E501
        :rtype: list[PaymentMethod]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this BillingInfo.


        :param payment_methods: The payment_methods of this BillingInfo.  # noqa: E501
        :type: list[PaymentMethod]
        """

        self._payment_methods = payment_methods

    @property
    def subscription_id(self):
        """Gets the subscription_id of this BillingInfo.  # noqa: E501


        :return: The subscription_id of this BillingInfo.  # noqa: E501
        :rtype: int
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this BillingInfo.


        :param subscription_id: The subscription_id of this BillingInfo.  # noqa: E501
        :type: int
        """

        self._subscription_id = subscription_id

    @property
    def vat_info(self):
        """Gets the vat_info of this BillingInfo.  # noqa: E501


        :return: The vat_info of this BillingInfo.  # noqa: E501
        :rtype: VatInfo
        """
        return self._vat_info

    @vat_info.setter
    def vat_info(self, vat_info):
        """Sets the vat_info of this BillingInfo.


        :param vat_info: The vat_info of this BillingInfo.  # noqa: E501
        :type: VatInfo
        """

        self._vat_info = vat_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

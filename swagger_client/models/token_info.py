# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'active': 'bool',
        'client_id': 'str',
        'created_at': 'int',
        'exp': 'int',
        'expires_in': 'int',
        'scopes': 'list[str]',
        'token_type': 'str',
        'username': 'str'
    }

    attribute_map = {
        'access_token': 'access_token',
        'active': 'active',
        'client_id': 'client_id',
        'created_at': 'created_at',
        'exp': 'exp',
        'expires_in': 'expires_in',
        'scopes': 'scopes',
        'token_type': 'token_type',
        'username': 'username'
    }

    def __init__(self, access_token=None, active=None, client_id=None, created_at=None, exp=None, expires_in=None, scopes=None, token_type=None, username=None):  # noqa: E501
        """TokenInfo - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._active = None
        self._client_id = None
        self._created_at = None
        self._exp = None
        self._expires_in = None
        self._scopes = None
        self._token_type = None
        self._username = None
        self.discriminator = None
        if access_token is not None:
            self.access_token = access_token
        if active is not None:
            self.active = active
        if client_id is not None:
            self.client_id = client_id
        if created_at is not None:
            self.created_at = created_at
        if exp is not None:
            self.exp = exp
        if expires_in is not None:
            self.expires_in = expires_in
        if scopes is not None:
            self.scopes = scopes
        if token_type is not None:
            self.token_type = token_type
        if username is not None:
            self.username = username

    @property
    def access_token(self):
        """Gets the access_token of this TokenInfo.  # noqa: E501


        :return: The access_token of this TokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this TokenInfo.


        :param access_token: The access_token of this TokenInfo.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def active(self):
        """Gets the active of this TokenInfo.  # noqa: E501


        :return: The active of this TokenInfo.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TokenInfo.


        :param active: The active of this TokenInfo.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def client_id(self):
        """Gets the client_id of this TokenInfo.  # noqa: E501


        :return: The client_id of this TokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this TokenInfo.


        :param client_id: The client_id of this TokenInfo.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def created_at(self):
        """Gets the created_at of this TokenInfo.  # noqa: E501


        :return: The created_at of this TokenInfo.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TokenInfo.


        :param created_at: The created_at of this TokenInfo.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def exp(self):
        """Gets the exp of this TokenInfo.  # noqa: E501


        :return: The exp of this TokenInfo.  # noqa: E501
        :rtype: int
        """
        return self._exp

    @exp.setter
    def exp(self, exp):
        """Sets the exp of this TokenInfo.


        :param exp: The exp of this TokenInfo.  # noqa: E501
        :type: int
        """

        self._exp = exp

    @property
    def expires_in(self):
        """Gets the expires_in of this TokenInfo.  # noqa: E501


        :return: The expires_in of this TokenInfo.  # noqa: E501
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this TokenInfo.


        :param expires_in: The expires_in of this TokenInfo.  # noqa: E501
        :type: int
        """

        self._expires_in = expires_in

    @property
    def scopes(self):
        """Gets the scopes of this TokenInfo.  # noqa: E501


        :return: The scopes of this TokenInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this TokenInfo.


        :param scopes: The scopes of this TokenInfo.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def token_type(self):
        """Gets the token_type of this TokenInfo.  # noqa: E501


        :return: The token_type of this TokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this TokenInfo.


        :param token_type: The token_type of this TokenInfo.  # noqa: E501
        :type: str
        """

        self._token_type = token_type

    @property
    def username(self):
        """Gets the username of this TokenInfo.  # noqa: E501


        :return: The username of this TokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TokenInfo.


        :param username: The username of this TokenInfo.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

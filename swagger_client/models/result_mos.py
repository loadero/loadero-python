# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResultMOS(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'algorithm': 'str',
        'created': 'datetime',
        'end': 'datetime',
        'id': 'int',
        'result_id': 'int',
        'score': 'float',
        'start': 'datetime'
    }

    attribute_map = {
        'algorithm': 'algorithm',
        'created': 'created',
        'end': 'end',
        'id': 'id',
        'result_id': 'result_id',
        'score': 'score',
        'start': 'start'
    }

    def __init__(self, algorithm=None, created=None, end=None, id=None, result_id=None, score=None, start=None):  # noqa: E501
        """ResultMOS - a model defined in Swagger"""  # noqa: E501
        self._algorithm = None
        self._created = None
        self._end = None
        self._id = None
        self._result_id = None
        self._score = None
        self._start = None
        self.discriminator = None
        self.algorithm = algorithm
        if created is not None:
            self.created = created
        self.end = end
        if id is not None:
            self.id = id
        if result_id is not None:
            self.result_id = result_id
        self.score = score
        self.start = start

    @property
    def algorithm(self):
        """Gets the algorithm of this ResultMOS.  # noqa: E501


        :return: The algorithm of this ResultMOS.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this ResultMOS.


        :param algorithm: The algorithm of this ResultMOS.  # noqa: E501
        :type: str
        """
        if algorithm is None:
            raise ValueError("Invalid value for `algorithm`, must not be `None`")  # noqa: E501

        self._algorithm = algorithm

    @property
    def created(self):
        """Gets the created of this ResultMOS.  # noqa: E501


        :return: The created of this ResultMOS.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ResultMOS.


        :param created: The created of this ResultMOS.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def end(self):
        """Gets the end of this ResultMOS.  # noqa: E501


        :return: The end of this ResultMOS.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this ResultMOS.


        :param end: The end of this ResultMOS.  # noqa: E501
        :type: datetime
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def id(self):
        """Gets the id of this ResultMOS.  # noqa: E501


        :return: The id of this ResultMOS.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResultMOS.


        :param id: The id of this ResultMOS.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def result_id(self):
        """Gets the result_id of this ResultMOS.  # noqa: E501


        :return: The result_id of this ResultMOS.  # noqa: E501
        :rtype: int
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this ResultMOS.


        :param result_id: The result_id of this ResultMOS.  # noqa: E501
        :type: int
        """

        self._result_id = result_id

    @property
    def score(self):
        """Gets the score of this ResultMOS.  # noqa: E501


        :return: The score of this ResultMOS.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ResultMOS.


        :param score: The score of this ResultMOS.  # noqa: E501
        :type: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    @property
    def start(self):
        """Gets the start of this ResultMOS.  # noqa: E501


        :return: The start of this ResultMOS.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ResultMOS.


        :param start: The start of this ResultMOS.  # noqa: E501
        :type: datetime
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultMOS, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultMOS):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

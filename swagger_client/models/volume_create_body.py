# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VolumeCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'driver': 'str',
        'driver_opts': 'dict(str, str)',
        'labels': 'dict(str, str)',
        'name': 'str'
    }

    attribute_map = {
        'driver': 'Driver',
        'driver_opts': 'DriverOpts',
        'labels': 'Labels',
        'name': 'Name'
    }

    def __init__(self, driver=None, driver_opts=None, labels=None, name=None):  # noqa: E501
        """VolumeCreateBody - a model defined in Swagger"""  # noqa: E501
        self._driver = None
        self._driver_opts = None
        self._labels = None
        self._name = None
        self.discriminator = None
        self.driver = driver
        self.driver_opts = driver_opts
        self.labels = labels
        self.name = name

    @property
    def driver(self):
        """Gets the driver of this VolumeCreateBody.  # noqa: E501

        Name of the volume driver to use.  # noqa: E501

        :return: The driver of this VolumeCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this VolumeCreateBody.

        Name of the volume driver to use.  # noqa: E501

        :param driver: The driver of this VolumeCreateBody.  # noqa: E501
        :type: str
        """
        if driver is None:
            raise ValueError("Invalid value for `driver`, must not be `None`")  # noqa: E501

        self._driver = driver

    @property
    def driver_opts(self):
        """Gets the driver_opts of this VolumeCreateBody.  # noqa: E501

        A mapping of driver options and values. These options are passed directly to the driver and are driver specific.  # noqa: E501

        :return: The driver_opts of this VolumeCreateBody.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._driver_opts

    @driver_opts.setter
    def driver_opts(self, driver_opts):
        """Sets the driver_opts of this VolumeCreateBody.

        A mapping of driver options and values. These options are passed directly to the driver and are driver specific.  # noqa: E501

        :param driver_opts: The driver_opts of this VolumeCreateBody.  # noqa: E501
        :type: dict(str, str)
        """
        if driver_opts is None:
            raise ValueError("Invalid value for `driver_opts`, must not be `None`")  # noqa: E501

        self._driver_opts = driver_opts

    @property
    def labels(self):
        """Gets the labels of this VolumeCreateBody.  # noqa: E501

        User-defined key/value metadata.  # noqa: E501

        :return: The labels of this VolumeCreateBody.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this VolumeCreateBody.

        User-defined key/value metadata.  # noqa: E501

        :param labels: The labels of this VolumeCreateBody.  # noqa: E501
        :type: dict(str, str)
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this VolumeCreateBody.  # noqa: E501

        The new volume's name. If not specified, Docker generates a name.  # noqa: E501

        :return: The name of this VolumeCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeCreateBody.

        The new volume's name. If not specified, Docker generates a name.  # noqa: E501

        :param name: The name of this VolumeCreateBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

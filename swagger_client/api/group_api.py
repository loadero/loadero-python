# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_group(self, project_id, test_id, **kwargs):  # noqa: E501
        """Create new group.  # noqa: E501

        This endpoint creates new group with given data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_group(project_id, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :param int test_id: (required)
        :param Group body:
        :param str describe:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_group_with_http_info(project_id, test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_group_with_http_info(project_id, test_id, **kwargs)  # noqa: E501
            return data

    def create_group_with_http_info(self, project_id, test_id, **kwargs):  # noqa: E501
        """Create new group.  # noqa: E501

        This endpoint creates new group with given data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_group_with_http_info(project_id, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :param int test_id: (required)
        :param Group body:
        :param str describe:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_id', 'body', 'describe']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_group`")  # noqa: E501
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `create_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501
        if 'test_id' in params:
            path_params['testID'] = params['test_id']  # noqa: E501

        query_params = []
        if 'describe' in params:
            query_params.append(('describe', params['describe']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/tests/{testID}/groups/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_group(self, group_id, project_id, test_id, **kwargs):  # noqa: E501
        """Delete existing group.  # noqa: E501

        This endpoint deletes group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_group(group_id, project_id, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int project_id: (required)
        :param int test_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_group_with_http_info(group_id, project_id, test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_group_with_http_info(group_id, project_id, test_id, **kwargs)  # noqa: E501
            return data

    def delete_group_with_http_info(self, group_id, project_id, test_id, **kwargs):  # noqa: E501
        """Delete existing group.  # noqa: E501

        This endpoint deletes group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_group_with_http_info(group_id, project_id, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int project_id: (required)
        :param int test_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'project_id', 'test_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `delete_group`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_group`")  # noqa: E501
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `delete_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501
        if 'test_id' in params:
            path_params['testID'] = params['test_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/tests/{testID}/groups/{groupID}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def duplicate_group(self, group_id, project_id, test_id, **kwargs):  # noqa: E501
        """Duplicate existing group.  # noqa: E501

        This endpoint duplicates given group. If no copy name is provided an \"Copy of\" prefix will be applied to the group name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.duplicate_group(group_id, project_id, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int project_id: (required)
        :param int test_id: (required)
        :param GroupIDCopyBody body:
        :param str describe:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.duplicate_group_with_http_info(group_id, project_id, test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.duplicate_group_with_http_info(group_id, project_id, test_id, **kwargs)  # noqa: E501
            return data

    def duplicate_group_with_http_info(self, group_id, project_id, test_id, **kwargs):  # noqa: E501
        """Duplicate existing group.  # noqa: E501

        This endpoint duplicates given group. If no copy name is provided an \"Copy of\" prefix will be applied to the group name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.duplicate_group_with_http_info(group_id, project_id, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int project_id: (required)
        :param int test_id: (required)
        :param GroupIDCopyBody body:
        :param str describe:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'project_id', 'test_id', 'body', 'describe']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method duplicate_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `duplicate_group`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `duplicate_group`")  # noqa: E501
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `duplicate_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501
        if 'test_id' in params:
            path_params['testID'] = params['test_id']  # noqa: E501

        query_params = []
        if 'describe' in params:
            query_params.append(('describe', params['describe']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/tests/{testID}/groups/{groupID}/copy/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_all_groups(self, project_id, test_id, **kwargs):  # noqa: E501
        """Get all existing groups for test.  # noqa: E501

        This endpoint retrieves all group info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_all_groups(project_id, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :param int test_id: (required)
        :param int limit:
        :param int offset:
        :param str describe:
        :param str filter_name:
        :param str filter_count_from:
        :param str filter_count_to:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_all_groups_with_http_info(project_id, test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_all_groups_with_http_info(project_id, test_id, **kwargs)  # noqa: E501
            return data

    def read_all_groups_with_http_info(self, project_id, test_id, **kwargs):  # noqa: E501
        """Get all existing groups for test.  # noqa: E501

        This endpoint retrieves all group info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_all_groups_with_http_info(project_id, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :param int test_id: (required)
        :param int limit:
        :param int offset:
        :param str describe:
        :param str filter_name:
        :param str filter_count_from:
        :param str filter_count_to:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_id', 'limit', 'offset', 'describe', 'filter_name', 'filter_count_from', 'filter_count_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_all_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `read_all_groups`")  # noqa: E501
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `read_all_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501
        if 'test_id' in params:
            path_params['testID'] = params['test_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'describe' in params:
            query_params.append(('describe', params['describe']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('filter_name', params['filter_name']))  # noqa: E501
        if 'filter_count_from' in params:
            query_params.append(('filter_count_from', params['filter_count_from']))  # noqa: E501
        if 'filter_count_to' in params:
            query_params.append(('filter_count_to', params['filter_count_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/tests/{testID}/groups/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_group(self, group_id, project_id, test_id, **kwargs):  # noqa: E501
        """Get existing group.  # noqa: E501

        This endpoint retrieves group info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_group(group_id, project_id, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int project_id: (required)
        :param int test_id: (required)
        :param str describe:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_group_with_http_info(group_id, project_id, test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_group_with_http_info(group_id, project_id, test_id, **kwargs)  # noqa: E501
            return data

    def read_group_with_http_info(self, group_id, project_id, test_id, **kwargs):  # noqa: E501
        """Get existing group.  # noqa: E501

        This endpoint retrieves group info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_group_with_http_info(group_id, project_id, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int project_id: (required)
        :param int test_id: (required)
        :param str describe:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'project_id', 'test_id', 'describe']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `read_group`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `read_group`")  # noqa: E501
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `read_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501
        if 'test_id' in params:
            path_params['testID'] = params['test_id']  # noqa: E501

        query_params = []
        if 'describe' in params:
            query_params.append(('describe', params['describe']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/tests/{testID}/groups/{groupID}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_group(self, group_id, project_id, test_id, **kwargs):  # noqa: E501
        """Update existing group.  # noqa: E501

        This endpoint updates group with given properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_group(group_id, project_id, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int project_id: (required)
        :param int test_id: (required)
        :param Group body:
        :param str describe:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_group_with_http_info(group_id, project_id, test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_group_with_http_info(group_id, project_id, test_id, **kwargs)  # noqa: E501
            return data

    def update_group_with_http_info(self, group_id, project_id, test_id, **kwargs):  # noqa: E501
        """Update existing group.  # noqa: E501

        This endpoint updates group with given properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_group_with_http_info(group_id, project_id, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int project_id: (required)
        :param int test_id: (required)
        :param Group body:
        :param str describe:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'project_id', 'test_id', 'body', 'describe']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `update_group`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_group`")  # noqa: E501
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `update_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501
        if 'test_id' in params:
            path_params['testID'] = params['test_id']  # noqa: E501

        query_params = []
        if 'describe' in params:
            query_params.append(('describe', params['describe']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/tests/{testID}/groups/{groupID}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

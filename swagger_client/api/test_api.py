# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: {{ .Version }}
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TestApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_test(self, name, start_interval, participant_timeout, mode, increment_strategy, script, project_id, **kwargs):  # noqa: E501
        """Create new test  # noqa: E501

        This endpoint creates new test with given data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_test(name, start_interval, participant_timeout, mode, increment_strategy, script, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param int start_interval: (required)
        :param int participant_timeout: (required)
        :param str mode: (required)
        :param str increment_strategy: (required)
        :param str script: (required)
        :param int project_id: (required)
        :param str describe:
        :param int id: readonly: true
        :param datetime created: readonly: true
        :param datetime updated: readonly: true
        :param int project_id: readonly: true
        :param int script_file_id: readonly: true
        :param bool deleted: readonly: true
        :param int group_count: readonly: true
        :param int participant_count: readonly: true
        :return: Test
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_test_with_http_info(name, start_interval, participant_timeout, mode, increment_strategy, script, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_test_with_http_info(name, start_interval, participant_timeout, mode, increment_strategy, script, project_id, **kwargs)  # noqa: E501
            return data

    def create_test_with_http_info(self, name, start_interval, participant_timeout, mode, increment_strategy, script, project_id, **kwargs):  # noqa: E501
        """Create new test  # noqa: E501

        This endpoint creates new test with given data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_test_with_http_info(name, start_interval, participant_timeout, mode, increment_strategy, script, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param int start_interval: (required)
        :param int participant_timeout: (required)
        :param str mode: (required)
        :param str increment_strategy: (required)
        :param str script: (required)
        :param int project_id: (required)
        :param str describe:
        :param int id: readonly: true
        :param datetime created: readonly: true
        :param datetime updated: readonly: true
        :param int project_id: readonly: true
        :param int script_file_id: readonly: true
        :param bool deleted: readonly: true
        :param int group_count: readonly: true
        :param int participant_count: readonly: true
        :return: Test
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'start_interval', 'participant_timeout', 'mode', 'increment_strategy', 'script', 'project_id', 'describe', 'id', 'created', 'updated', 'project_id', 'script_file_id', 'deleted', 'group_count', 'participant_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_test`")  # noqa: E501
        # verify the required parameter 'start_interval' is set
        if ('start_interval' not in params or
                params['start_interval'] is None):
            raise ValueError("Missing the required parameter `start_interval` when calling `create_test`")  # noqa: E501
        # verify the required parameter 'participant_timeout' is set
        if ('participant_timeout' not in params or
                params['participant_timeout'] is None):
            raise ValueError("Missing the required parameter `participant_timeout` when calling `create_test`")  # noqa: E501
        # verify the required parameter 'mode' is set
        if ('mode' not in params or
                params['mode'] is None):
            raise ValueError("Missing the required parameter `mode` when calling `create_test`")  # noqa: E501
        # verify the required parameter 'increment_strategy' is set
        if ('increment_strategy' not in params or
                params['increment_strategy'] is None):
            raise ValueError("Missing the required parameter `increment_strategy` when calling `create_test`")  # noqa: E501
        # verify the required parameter 'script' is set
        if ('script' not in params or
                params['script'] is None):
            raise ValueError("Missing the required parameter `script` when calling `create_test`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501

        query_params = []
        if 'describe' in params:
            query_params.append(('describe', params['describe']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            query_params.append(('created', params['created']))  # noqa: E501
        if 'updated' in params:
            query_params.append(('updated', params['updated']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('project_id', params['project_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'script_file_id' in params:
            query_params.append(('script_file_id', params['script_file_id']))  # noqa: E501
        if 'start_interval' in params:
            query_params.append(('start_interval', params['start_interval']))  # noqa: E501
        if 'participant_timeout' in params:
            query_params.append(('participant_timeout', params['participant_timeout']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'increment_strategy' in params:
            query_params.append(('increment_strategy', params['increment_strategy']))  # noqa: E501
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501
        if 'group_count' in params:
            query_params.append(('group_count', params['group_count']))  # noqa: E501
        if 'participant_count' in params:
            query_params.append(('participant_count', params['participant_count']))  # noqa: E501
        if 'script' in params:
            query_params.append(('script', params['script']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/tests/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Test',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_test(self, test_id, project_id, **kwargs):  # noqa: E501
        """Delete existing test  # noqa: E501

        This endpoint deletes test. Project and test must be previously created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_test(test_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_id: (required)
        :param int project_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_test_with_http_info(test_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_test_with_http_info(test_id, project_id, **kwargs)  # noqa: E501
            return data

    def delete_test_with_http_info(self, test_id, project_id, **kwargs):  # noqa: E501
        """Delete existing test  # noqa: E501

        This endpoint deletes test. Project and test must be previously created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_test_with_http_info(test_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_id: (required)
        :param int project_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `delete_test`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_id' in params:
            path_params['testID'] = params['test_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/tests/{testID}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def duplicate_test(self, test_id, project_id, **kwargs):  # noqa: E501
        """Duplicate existing test  # noqa: E501

        This endpoint duplicates given test. If no copy name is provided an \"Copy of\" prefix will be applied to the test name. Project and test must be previously created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.duplicate_test(test_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_id: (required)
        :param int project_id: (required)
        :param TestIDCopyBody body:
        :param str describe:
        :return: Test
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.duplicate_test_with_http_info(test_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.duplicate_test_with_http_info(test_id, project_id, **kwargs)  # noqa: E501
            return data

    def duplicate_test_with_http_info(self, test_id, project_id, **kwargs):  # noqa: E501
        """Duplicate existing test  # noqa: E501

        This endpoint duplicates given test. If no copy name is provided an \"Copy of\" prefix will be applied to the test name. Project and test must be previously created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.duplicate_test_with_http_info(test_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_id: (required)
        :param int project_id: (required)
        :param TestIDCopyBody body:
        :param str describe:
        :return: Test
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_id', 'project_id', 'body', 'describe']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method duplicate_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `duplicate_test`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `duplicate_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_id' in params:
            path_params['testID'] = params['test_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501

        query_params = []
        if 'describe' in params:
            query_params.append(('describe', params['describe']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/tests/{testID}/copy/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Test',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_all_tests(self, project_id, **kwargs):  # noqa: E501
        """Get all existing tests for project  # noqa: E501

        This endpoint retrieves all test info. Project must be previously created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_all_tests(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :param int limit:
        :param int offset:
        :param str describe:
        :param str filter_name:
        :param str filter_test_mode:
        :param str filter_increment_strategy:
        :param str filter_start_interval_from:
        :param str filter_start_interval_to:
        :param str filter_participant_timeout_from:
        :param str filter_participant_timeout_to:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_all_tests_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_all_tests_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def read_all_tests_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get all existing tests for project  # noqa: E501

        This endpoint retrieves all test info. Project must be previously created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_all_tests_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :param int limit:
        :param int offset:
        :param str describe:
        :param str filter_name:
        :param str filter_test_mode:
        :param str filter_increment_strategy:
        :param str filter_start_interval_from:
        :param str filter_start_interval_to:
        :param str filter_participant_timeout_from:
        :param str filter_participant_timeout_to:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'limit', 'offset', 'describe', 'filter_name', 'filter_test_mode', 'filter_increment_strategy', 'filter_start_interval_from', 'filter_start_interval_to', 'filter_participant_timeout_from', 'filter_participant_timeout_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_all_tests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `read_all_tests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'describe' in params:
            query_params.append(('describe', params['describe']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('filter_name', params['filter_name']))  # noqa: E501
        if 'filter_test_mode' in params:
            query_params.append(('filter_test_mode', params['filter_test_mode']))  # noqa: E501
        if 'filter_increment_strategy' in params:
            query_params.append(('filter_increment_strategy', params['filter_increment_strategy']))  # noqa: E501
        if 'filter_start_interval_from' in params:
            query_params.append(('filter_start_interval_from', params['filter_start_interval_from']))  # noqa: E501
        if 'filter_start_interval_to' in params:
            query_params.append(('filter_start_interval_to', params['filter_start_interval_to']))  # noqa: E501
        if 'filter_participant_timeout_from' in params:
            query_params.append(('filter_participant_timeout_from', params['filter_participant_timeout_from']))  # noqa: E501
        if 'filter_participant_timeout_to' in params:
            query_params.append(('filter_participant_timeout_to', params['filter_participant_timeout_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/tests/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_test(self, test_id, project_id, **kwargs):  # noqa: E501
        """Read test info  # noqa: E501

        This endpoint retrieves test info. Project and test must be previously created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_test(test_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_id: (required)
        :param int project_id: (required)
        :param str describe:
        :return: Test
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_test_with_http_info(test_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_test_with_http_info(test_id, project_id, **kwargs)  # noqa: E501
            return data

    def read_test_with_http_info(self, test_id, project_id, **kwargs):  # noqa: E501
        """Read test info  # noqa: E501

        This endpoint retrieves test info. Project and test must be previously created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_test_with_http_info(test_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_id: (required)
        :param int project_id: (required)
        :param str describe:
        :return: Test
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_id', 'project_id', 'describe']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `read_test`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `read_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_id' in params:
            path_params['testID'] = params['test_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501

        query_params = []
        if 'describe' in params:
            query_params.append(('describe', params['describe']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/tests/{testID}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Test',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_test(self, name, start_interval, participant_timeout, mode, increment_strategy, script, test_id, project_id, **kwargs):  # noqa: E501
        """Update existing test  # noqa: E501

        This endpoint updates test with given properties. Project and test must be previously created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test(name, start_interval, participant_timeout, mode, increment_strategy, script, test_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param int start_interval: (required)
        :param int participant_timeout: (required)
        :param str mode: (required)
        :param str increment_strategy: (required)
        :param str script: (required)
        :param int test_id: (required)
        :param int project_id: (required)
        :param str describe:
        :param int id: readonly: true
        :param datetime created: readonly: true
        :param datetime updated: readonly: true
        :param int project_id: readonly: true
        :param int script_file_id: readonly: true
        :param bool deleted: readonly: true
        :param int group_count: readonly: true
        :param int participant_count: readonly: true
        :return: Test
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_test_with_http_info(name, start_interval, participant_timeout, mode, increment_strategy, script, test_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_test_with_http_info(name, start_interval, participant_timeout, mode, increment_strategy, script, test_id, project_id, **kwargs)  # noqa: E501
            return data

    def update_test_with_http_info(self, name, start_interval, participant_timeout, mode, increment_strategy, script, test_id, project_id, **kwargs):  # noqa: E501
        """Update existing test  # noqa: E501

        This endpoint updates test with given properties. Project and test must be previously created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test_with_http_info(name, start_interval, participant_timeout, mode, increment_strategy, script, test_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param int start_interval: (required)
        :param int participant_timeout: (required)
        :param str mode: (required)
        :param str increment_strategy: (required)
        :param str script: (required)
        :param int test_id: (required)
        :param int project_id: (required)
        :param str describe:
        :param int id: readonly: true
        :param datetime created: readonly: true
        :param datetime updated: readonly: true
        :param int project_id: readonly: true
        :param int script_file_id: readonly: true
        :param bool deleted: readonly: true
        :param int group_count: readonly: true
        :param int participant_count: readonly: true
        :return: Test
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'start_interval', 'participant_timeout', 'mode', 'increment_strategy', 'script', 'test_id', 'project_id', 'describe', 'id', 'created', 'updated', 'project_id', 'script_file_id', 'deleted', 'group_count', 'participant_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_test`")  # noqa: E501
        # verify the required parameter 'start_interval' is set
        if ('start_interval' not in params or
                params['start_interval'] is None):
            raise ValueError("Missing the required parameter `start_interval` when calling `update_test`")  # noqa: E501
        # verify the required parameter 'participant_timeout' is set
        if ('participant_timeout' not in params or
                params['participant_timeout'] is None):
            raise ValueError("Missing the required parameter `participant_timeout` when calling `update_test`")  # noqa: E501
        # verify the required parameter 'mode' is set
        if ('mode' not in params or
                params['mode'] is None):
            raise ValueError("Missing the required parameter `mode` when calling `update_test`")  # noqa: E501
        # verify the required parameter 'increment_strategy' is set
        if ('increment_strategy' not in params or
                params['increment_strategy'] is None):
            raise ValueError("Missing the required parameter `increment_strategy` when calling `update_test`")  # noqa: E501
        # verify the required parameter 'script' is set
        if ('script' not in params or
                params['script'] is None):
            raise ValueError("Missing the required parameter `script` when calling `update_test`")  # noqa: E501
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `update_test`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_id' in params:
            path_params['testID'] = params['test_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501

        query_params = []
        if 'describe' in params:
            query_params.append(('describe', params['describe']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            query_params.append(('created', params['created']))  # noqa: E501
        if 'updated' in params:
            query_params.append(('updated', params['updated']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('project_id', params['project_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'script_file_id' in params:
            query_params.append(('script_file_id', params['script_file_id']))  # noqa: E501
        if 'start_interval' in params:
            query_params.append(('start_interval', params['start_interval']))  # noqa: E501
        if 'participant_timeout' in params:
            query_params.append(('participant_timeout', params['participant_timeout']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'increment_strategy' in params:
            query_params.append(('increment_strategy', params['increment_strategy']))  # noqa: E501
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501
        if 'group_count' in params:
            query_params.append(('group_count', params['group_count']))  # noqa: E501
        if 'participant_count' in params:
            query_params.append(('participant_count', params['participant_count']))  # noqa: E501
        if 'script' in params:
            query_params.append(('script', params['script']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/tests/{testID}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Test',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

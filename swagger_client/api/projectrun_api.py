# coding: utf-8

"""
    Loadero Controller

    This application serves main Loadero's endpoints that can be used to manipulate test data and other services  # noqa: E501

    OpenAPI spec version: v0.38.0
    Contact: support@loadero.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProjectrunApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def read_all_project_runs(self, project_id, **kwargs):  # noqa: E501
        """Get all existing test runs for project  # noqa: E501

        This endpoint retrieves all test run info. Project must be previously created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_all_project_runs(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :param int limit:
        :param int offset:
        :param str describe:
        :param str filter_test_name:
        :param str filter_started_from:
        :param str filter_started_to:
        :param str filter_finished_from:
        :param str filter_finished_to:
        :param str filter_execution_started_from:
        :param str filter_execution_started_to:
        :param str filter_execution_finished_from:
        :param str filter_execution_finished_to:
        :param str filter_increment_strategy:
        :param str filter_status:
        :param str filter_metric_status:
        :param str filter_test_mode:
        :param str filter_start_interval_from:
        :param str filter_start_interval_to:
        :param str filter_participant_timeout_from:
        :param str filter_participant_timeout_to:
        :param str filter_active:
        :param str mos_test:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_all_project_runs_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_all_project_runs_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def read_all_project_runs_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get all existing test runs for project  # noqa: E501

        This endpoint retrieves all test run info. Project must be previously created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_all_project_runs_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :param int limit:
        :param int offset:
        :param str describe:
        :param str filter_test_name:
        :param str filter_started_from:
        :param str filter_started_to:
        :param str filter_finished_from:
        :param str filter_finished_to:
        :param str filter_execution_started_from:
        :param str filter_execution_started_to:
        :param str filter_execution_finished_from:
        :param str filter_execution_finished_to:
        :param str filter_increment_strategy:
        :param str filter_status:
        :param str filter_metric_status:
        :param str filter_test_mode:
        :param str filter_start_interval_from:
        :param str filter_start_interval_to:
        :param str filter_participant_timeout_from:
        :param str filter_participant_timeout_to:
        :param str filter_active:
        :param str mos_test:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'limit', 'offset', 'describe', 'filter_test_name', 'filter_started_from', 'filter_started_to', 'filter_finished_from', 'filter_finished_to', 'filter_execution_started_from', 'filter_execution_started_to', 'filter_execution_finished_from', 'filter_execution_finished_to', 'filter_increment_strategy', 'filter_status', 'filter_metric_status', 'filter_test_mode', 'filter_start_interval_from', 'filter_start_interval_to', 'filter_participant_timeout_from', 'filter_participant_timeout_to', 'filter_active', 'mos_test']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_all_project_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `read_all_project_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'describe' in params:
            query_params.append(('describe', params['describe']))  # noqa: E501
        if 'filter_test_name' in params:
            query_params.append(('filter_test_name', params['filter_test_name']))  # noqa: E501
        if 'filter_started_from' in params:
            query_params.append(('filter_started_from', params['filter_started_from']))  # noqa: E501
        if 'filter_started_to' in params:
            query_params.append(('filter_started_to', params['filter_started_to']))  # noqa: E501
        if 'filter_finished_from' in params:
            query_params.append(('filter_finished_from', params['filter_finished_from']))  # noqa: E501
        if 'filter_finished_to' in params:
            query_params.append(('filter_finished_to', params['filter_finished_to']))  # noqa: E501
        if 'filter_execution_started_from' in params:
            query_params.append(('filter_execution_started_from', params['filter_execution_started_from']))  # noqa: E501
        if 'filter_execution_started_to' in params:
            query_params.append(('filter_execution_started_to', params['filter_execution_started_to']))  # noqa: E501
        if 'filter_execution_finished_from' in params:
            query_params.append(('filter_execution_finished_from', params['filter_execution_finished_from']))  # noqa: E501
        if 'filter_execution_finished_to' in params:
            query_params.append(('filter_execution_finished_to', params['filter_execution_finished_to']))  # noqa: E501
        if 'filter_increment_strategy' in params:
            query_params.append(('filter_increment_strategy', params['filter_increment_strategy']))  # noqa: E501
        if 'filter_status' in params:
            query_params.append(('filter_status', params['filter_status']))  # noqa: E501
        if 'filter_metric_status' in params:
            query_params.append(('filter_metric_status', params['filter_metric_status']))  # noqa: E501
        if 'filter_test_mode' in params:
            query_params.append(('filter_test_mode', params['filter_test_mode']))  # noqa: E501
        if 'filter_start_interval_from' in params:
            query_params.append(('filter_start_interval_from', params['filter_start_interval_from']))  # noqa: E501
        if 'filter_start_interval_to' in params:
            query_params.append(('filter_start_interval_to', params['filter_start_interval_to']))  # noqa: E501
        if 'filter_participant_timeout_from' in params:
            query_params.append(('filter_participant_timeout_from', params['filter_participant_timeout_from']))  # noqa: E501
        if 'filter_participant_timeout_to' in params:
            query_params.append(('filter_participant_timeout_to', params['filter_participant_timeout_to']))  # noqa: E501
        if 'filter_active' in params:
            query_params.append(('filter_active', params['filter_active']))  # noqa: E501
        if 'mos_test' in params:
            query_params.append(('mos_test', params['mos_test']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/runs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_project_run(self, run_id, project_id, **kwargs):  # noqa: E501
        """Read project test run info  # noqa: E501

        This endpoint retrieves project test run info. Project and run must be previously created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_project_run(run_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int run_id: (required)
        :param int project_id: (required)
        :return: RunBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_project_run_with_http_info(run_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_project_run_with_http_info(run_id, project_id, **kwargs)  # noqa: E501
            return data

    def read_project_run_with_http_info(self, run_id, project_id, **kwargs):  # noqa: E501
        """Read project test run info  # noqa: E501

        This endpoint retrieves project test run info. Project and run must be previously created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_project_run_with_http_info(run_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int run_id: (required)
        :param int project_id: (required)
        :return: RunBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['run_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_project_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `read_project_run`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `read_project_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'run_id' in params:
            path_params['runID'] = params['run_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectID'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectID}/runs/{runID}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
